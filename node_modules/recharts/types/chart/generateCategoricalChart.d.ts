import React from 'react';
import { LayoutType, CategoricalChartOptions, Margin, ChartOffset, BaseAxisProps, ChartCoordinate, TickItem } from '../util/types';
export interface CategoricalChartState {
    chartX?: number;
    chartY?: number;
    dataStartIndex?: number;
    dataEndIndex?: number;
    activeTooltipIndex?: number;
    isTooltipActive?: boolean;
    updateId?: number;
    xAxisMap?: {
        [k: string]: BaseAxisProps;
    };
    yAxisMap?: {
        [k: string]: BaseAxisProps;
    };
    orderedTooltipTicks?: any;
    tooltipAxis?: BaseAxisProps;
    tooltipTicks?: TickItem[];
    graphicalItems?: any;
    activeCoordinate?: ChartCoordinate;
    offset?: ChartOffset;
    angleAxisMap?: any;
    radiusAxisMap?: any;
    formatedGraphicalItems?: any;
    activePayload?: any[];
    tooltipAxisBandSize?: number;
    activeItem?: any;
    activeLabel?: string;
    xValue?: number;
    yValue?: number;
}
export interface CategoricalChartProps {
    syncId?: number | string;
    compact?: boolean;
    width?: number;
    height?: number;
    data?: any[];
    layout?: LayoutType;
    stackOffset?: 'sign' | 'expand' | 'none' | 'wiggle' | 'silhouette';
    throttleDelay?: number;
    margin?: Margin;
    barCategoryGap?: number | string;
    barGap?: number | string;
    barSize?: number | string;
    maxBarSize?: number;
    style?: any;
    className?: string;
    children?: any;
    defaultShowTooltip?: boolean;
    onClick?: any;
    onMouseLeave?: any;
    onMouseEnter?: any;
    onMouseMove?: any;
    onMouseDown?: any;
    onMouseUp?: any;
    reverseStackOrder?: boolean;
    id?: string;
    startAngle?: number;
    endAngle?: number;
    cx?: number | string;
    cy?: number | string;
    innerRadius?: number | string;
    outerRadius?: number | string;
}
declare const generateCategoricalChart: ({ chartName, GraphicalChild, eventType, axisComponents, legendContent, formatAxisMap, defaultProps, }: CategoricalChartOptions) => {
    new (props: CategoricalChartProps): {
        uniqueChartId: any;
        clipPathId: any;
        legendInstance: any;
        container?: any;
        componentDidMount(): void;
        UNSAFE_componentWillReceiveProps(nextProps: CategoricalChartProps): void;
        componentWillUnmount(): void;
        cancelThrottledTriggerAfterMouseMove(): void;
        getAxisMap(props: CategoricalChartProps, { axisType, AxisComp, graphicalItems, stackGroups, dataStartIndex, dataEndIndex }: any): {};
        getAxisMapByAxes: (props: CategoricalChartProps, { axes, graphicalItems, axisType, axisIdKey, stackGroups, dataStartIndex, dataEndIndex }: any) => any;
        getAxisMapByItems: (props: CategoricalChartProps, { graphicalItems, Axis, axisType, axisIdKey, stackGroups, dataStartIndex, dataEndIndex }: any) => any;
        getActiveCoordinate(tooltipTicks: TickItem[], activeIndex: any, rangeObj: any): ChartCoordinate;
        getMouseInfo(event: any): {
            xValue: any;
            yValue: any;
            chartX: number;
            chartY: number;
        } | {
            activeTooltipIndex: number;
            activeLabel: any;
            activePayload: any[];
            activeCoordinate: ChartCoordinate;
            chartX: number;
            chartY: number;
        };
        getTooltipContent(activeIndex: number, activeLabel?: string): any[];
        getFormatItems(props: CategoricalChartProps, currentState: any): any[];
        getCursorRectangle(): any;
        getCursorPoints(): any;
        calculateTooltipPos(rangeObj: any): any;
        inRange(x: number, y: number): any;
        parseEventsOfWrapper(): any;
        updateStateOfAxisMapsOffsetAndStackGroups({ props, dataStartIndex, dataEndIndex, updateId }: any): any;
        addListener(): void;
        removeListener(): void;
        calculateOffset({ props, graphicalItems, xAxisMap, yAxisMap }: any): any;
        handleLegendBBoxUpdate: (box: any) => void;
        handleReceiveSyncEvent: (cId: any, chartId: any, data: any) => void;
        handleBrushChange: ({ startIndex, endIndex }: any) => void;
        handleMouseEnter: (e: any) => void;
        triggeredAfterMouseMove: (e: any) => any;
        handleItemMouseEnter: (el: any) => void;
        handleItemMouseLeave: () => void;
        handleMouseMove: (e: any) => void;
        handleMouseLeave: (e: any) => void;
        handleOuterEvent: (e: any) => void;
        handleClick: (e: any) => void;
        handleMouseDown: (e: any) => void;
        handleMouseUp: (e: any) => void;
        handleTouchMove: (e: any) => void;
        handleTouchStart: (e: any) => void;
        handleTouchEnd: (e: any) => void;
        triggerSyncEvent(data: any): void;
        verticalCoordinatesGenerator: ({ xAxis, width, height, offset }: ChartCoordinate) => number[];
        horizontalCoordinatesGenerator: ({ yAxis, width, height, offset }: ChartCoordinate) => number[];
        axesTicksGenerator: (axis?: any) => TickItem[];
        tooltipTicksGenerator: (axisMap: any) => {
            tooltipTicks: TickItem[];
            orderedTooltipTicks: TickItem[];
            tooltipAxis: BaseAxisProps;
            tooltipAxisBandSize: any;
        };
        filterFormatItem(item: any, displayName: any, childIndex: any): any;
        renderCursor: (element: any) => React.DetailedReactHTMLElement<any, HTMLElement> | React.CElement<any, React.Component<any, any, any>>;
        renderPolarAxis: (element: any, displayName: string, index: number) => React.DetailedReactHTMLElement<any, HTMLElement>;
        renderXAxis: (element: any, displayName: string, index: number) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderYAxis: (element: any, displayName: string, index: number) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderAxis(axisOptions: BaseAxisProps, element: any, displayName: string, index: number): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderGrid: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderPolarGrid: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderLegend: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderTooltip: () => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderBrush: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderReferenceElement: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>, displayName: string, index: number) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderActivePoints: ({ item, activePoint, basePoint, childIndex, isRange }: any) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>[];
        renderGraphicChild: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>, displayName: string, index: number) => any[];
        renderCustomized: (element: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
        renderClipPath(): JSX.Element;
        render(): JSX.Element;
        context: any;
        setState<K extends "offset" | "graphicalItems" | "dataStartIndex" | "dataEndIndex" | "xAxisMap" | "chartX" | "chartY" | "activeTooltipIndex" | "isTooltipActive" | "updateId" | "yAxisMap" | "orderedTooltipTicks" | "tooltipAxis" | "tooltipTicks" | "activeCoordinate" | "angleAxisMap" | "radiusAxisMap" | "formatedGraphicalItems" | "activePayload" | "tooltipAxisBandSize" | "activeItem" | "activeLabel" | "xValue" | "yValue">(state: CategoricalChartState | ((prevState: Readonly<CategoricalChartState>, props: Readonly<CategoricalChartProps>) => CategoricalChartState | Pick<CategoricalChartState, K>) | Pick<CategoricalChartState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<CategoricalChartProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<CategoricalChartState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<CategoricalChartProps>, prevState: Readonly<CategoricalChartState>): any;
        componentDidUpdate?(prevProps: Readonly<CategoricalChartProps>, prevState: Readonly<CategoricalChartState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<CategoricalChartProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<CategoricalChartProps>, nextState: Readonly<CategoricalChartState>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: CategoricalChartProps;
    createDefaultState: (props: CategoricalChartProps) => CategoricalChartState;
    hasBar: (graphicalItems: any[]) => boolean | any[];
    getDisplayedData: (props: CategoricalChartProps, { graphicalItems, dataStartIndex, dataEndIndex }: any, item?: any) => any[];
    getAxisNameByLayout(layout: LayoutType): {
        numericAxisName: string;
        cateAxisName: string;
    };
    renderActiveDot(option: any, props: any): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
    contextType?: React.Context<any>;
};
export default generateCategoricalChart;
